// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator erd {
  provider = "prisma-erd-generator"
  output   = "../../schema.svg"
}

model User {
  id       String    @id @default(uuid())
  username String    @unique() //make not unique
  email    String    @unique() // As email is in Profiles, maybe not needed
  image    String?
  password String
  profiles Profile[]
  settings Settings?
}

model Settings {
  id       String @id @default(uuid())
  userId   String @unique()
  User     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  language String @default("en") // Default language
}

model Profile {
  id             String           @id @default(uuid()) // Changed to uuid
  username       String
  type           String
  image          String
  email          String // Every Profile can have an own email for notifications. Can be used for logins aswell
  about          String?
  userId         String? // Matches User ID type
  User           User?            @relation(fields: [userId], references: [id], onDelete: Cascade)
  interests      Interest[]       @relation("ProfileInterests")
  locations      Location[]       @relation("ProfileLocations")
  activities     Activity[]
  PluginSettings PluginSettings[]
}

model Interest {
  id         String     @id @default(uuid())
  title      String
  language   String     @default("en")
  profiles   Profile[]  @relation("ProfileInterests")
  activities Activity[] @relation("ActivityInterests")
  links      String[]
  invites    String[]
  access     Int        @default(0)

  relations Relation[]
}

model Location {
  id          String    @id @default(uuid())
  title       String
  xCoordinate String?
  yCoordinate String?
  zoom        Int?
  profiles    Profile[] @relation("ProfileLocations")
  links       String[]
  invites     String[]
  access      Int       @default(0)

  relations Relation[]
  Activity  Activity[]
}

model Relation {
  id         String    @id @default(uuid())
  key        String
  type       String
  data       Json
  Interest   Interest? @relation(fields: [interestId], references: [id])
  interestId String?
  Location   Location? @relation(fields: [locationId], references: [id])
  locationId String?
}

model Activity {
  id         String     @id @default(uuid())
  profileId  String
  profile    Profile    @relation(fields: [profileId], references: [id])
  text       String
  href       String?
  status     Status
  type       Type
  date       DateTime   @default(now())
  locationId String?
  location   Location?  @relation(fields: [locationId], references: [id])
  interests  Interest[] @relation("ActivityInterests")

  @@index([profileId])
  @@index([locationId])
}

model PluginSettings {
  id        String  @id @default(uuid())
  name      String
  path      String
  key       String
  pluginId  String
  profileId String
  profile   Profile @relation(fields: [profileId], references: [id])
  active    Boolean @default(true)
  settings  Json[]
}

enum Type {
  NORMAL
  DISCUSSION
  POLL
  GOVERNANCE
  EVENT
}

enum Status {
  IMPORTANT
  ONGOING
  LEARNING
  TEACHING
  INTERESTED
  FAVOURITE
  CURRENTLY_AT
  GOING_NEXT
}
